rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    //==================== ユーザー ====================//

    match /users/{userId} {
      function isUserAuthenticated() {
        return request.auth != null;
      }

      function isUserHimself() {
        return request.auth.uid == userId;
      }

      //***** 単一ユーザー取得 *****//
      allow get: if 
        isUserAuthenticated() &&
        isUserHimself();

      //***** ユーザー追加 *****//
      allow create: if 
        isUserAuthenticated() &&
        isUserHimself() &&
        request.resource.data.keys().hasOnly([
          "email", 
          "createdAt"
        ]) &&
        // email
        request.resource.data.email == request.auth.token.email &&
         // createdAt
        request.resource.data.createdAt is timestamp &&
        request.resource.data.createdAt == request.time;
      

      //==================== 動物 ====================//
      match /animals/{animalId} {

        function isValidCreate() {
          let fields = [
            "id",
            "name", 
            "sex", 
            "parents", 
            "children",
            "note", 
            "ownerId", 
            "visibility", 
            "createdAt",
            "createdBy", 
            "updatedAt",
            "updatedBy"
          ];
          let maxId = 100;
          let maxAnimalName = 30;
          let maxParents = 2;
          let maxChildren = 30;
          let maxNote = 500;
          let maxTimestamp = 30;

          return 
            isValidFieldsForCreate(fields) &&
            isValidAnimalId() &&
            isValidName(maxAnimalName) &&
            isValidSex() &&
            isValidFamily("parents", maxParents) &&
            isValidFamily("children", maxChildren) &&
            isValidNote(maxNote) &&
            isValidOwnerId() &&
            isValidVisibility() &&
            isValidTimestamp("createdAt", maxTimestamp) &&
            isValidTimestamp("updatedAt", maxTimestamp) &&
            isValidModifier("createdBy", maxId) &&
            isValidModifier("updatedBy", maxId);
        }

        function isValidFieldsForCreate(fields) {
          // フィールドを完全一致にする
          let keys = request.resource.data.keys();
          return 
            keys.hasAll(fields) && // 必須
            keys.hasOnly(fields); // 許可
        }

        function isValidAnimalId() {
          return request.resource.data.id == animalId;
        }

        function isValidName(maxAnimalName) {
          let name = request.resource.data.name;
          return 
            name is string &&
            name.size() >= 1 && // 必須
            name.size() <= maxAnimalName;
        }

        function isValidSex() {
          let sex = request.resource.data.sex;
          return 
            sex in ["", "male", "female"];
        }

        function isValidFamily(type, maxFamily) {
          let family = request.resource.data[type];
          return 
            family is list && // 配列
            family.size() <= maxFamily;
        }

        function isValidNote(maxNote) {
          let note = request.resource.data.note;
          return 
            note is string &&
            note.size() <= maxNote; // 500文字以内
        }

        function isValidOwnerId() {
          let ownerId = request.resource.data.ownerId;
          return 
            ownerId is string &&
            ownerId == userId; // 現時点では自分のidのみ許可
        }

        function isValidVisibility() {
          return request.resource.data.visibility == "private";
        }

        function isValidTimestamp(type, maxTimestamp) {
          let ts = request.resource.data[type];
          return 
            ts is string &&
            ts.size() >= 1 && // 必須
            ts.size() <= maxTimestamp;
        }

        function isValidModifier(type, maxId) {
          let modifier = request.resource.data[type];
          return 
            modifier is string &&
            modifier.size() <= maxId && 
            modifier == userId; // 現時点では自分のidのみ許可
        }

        //***** 単一動物取得 *****//
        allow get: if 
          isUserAuthenticated() && 
          isUserHimself();
      
        //***** 複数動物取得 *****//
        allow list: if 
          isUserAuthenticated() &&
          isUserHimself();

        //***** 動物追加 *****//
        allow create, update: if 
          isUserAuthenticated() &&
          isUserHimself() &&
          isValidCreate();

        //***** 動物削除 *****//
        allow delete: if 
          isUserAuthenticated() &&
          isUserHimself();
      }
    }
  }
}