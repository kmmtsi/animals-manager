rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function auth() {
      return request.auth != null;
    }

    function user(userDocId) {
      return request.auth.uid == userDocId;
    }

    function id(docId) {
      return request.resource.data.id == docId;
    }

    function date(field) {
      let date = request.resource.data[field];
      return 
        date is string &&
        date.size() <= 100;
    }

    function note() {
      let note = request.resource.data.note;
      return 
        note is string &&
        note.size() <= 500;
    }

    function folderIds() {
      let folderIds = request.resource.data.folderIds;
      return 
        folderIds is list &&
        folderIds.size() <= 100;
    }

    function timestamp(field) {
      let ts = request.resource.data[field];
      return 
        ts is string &&
        ts.size() >= 1 &&
        ts.size() <= 30;
    }

    function modifier(field) {
      let modifier = request.resource.data[field];
      return 
        modifier is string &&
        modifier.size() >= 1 &&
        modifier.size() <= 100; // documentId
    }

    // folder
    function folderFields() {
      let keys = request.resource.data.keys();
      let fields = [
        "id",
        "name",
        "itemIds",
        "note",
        "createdAt",
        "createdBy",
        "updatedAt",
        "updatedBy"
      ];
      return 
        keys.hasAll(fields) &&
        keys.hasOnly(fields);
    }

    function folderName() {
      let name = request.resource.data.name;
      return 
        name is string &&
        name.size() >= 1 &&
        name.size() <= 50;
    }

    function itemIds() {
      let itemIds = request.resource.data.itemIds;
      return 
        itemIds is list &&
        itemIds.size() <= 300;
    }


    //==================== User ====================//
    match /users/{userDocId} {
      function userFields() {
        let keys = request.resource.data.keys();
        let fields = [
          "id",
          "email",
          "createdAt",
          "updatedAt"
        ];
        return 
          keys.hasAll(fields) &&
          keys.hasOnly(fields);
      }

      function email() {
        return request.resource.data.email == request.auth.token.email;
      }
      
      //***** get User *****//
      allow get: if // list NG
        auth() &&
        user(userDocId);

      //***** create User *****//
      allow create: if // update NG
        auth() &&
        user(userDocId) &&
        userFields() &&
        id(userDocId) &&
        email() &&
        timestamp("createdAt") &&
        timestamp("createdAt");


      //==================== Animal ====================//
      match /animals/{animalDocId} {
        function animalFields() {
          let keys = request.resource.data.keys();
          let fields = [
            "id",
            "name", 
            "sex", 
            "breedingIdAsChild", 
            "breedingIdsAsParent",
            "healthCondition",
            "dateOfBirth",
            "note", 
            "folderIds",
            "createdAt",
            "createdBy", 
            "updatedAt",
            "updatedBy"
          ];
          return 
            keys.hasAll(fields) &&
            keys.hasOnly(fields);
        }

        function name() {
          let name = request.resource.data.name;
          return 
            name is string &&
            name.size() >= 1 &&
            name.size() <= 50;
        }

        function sex() {
          let sex = request.resource.data.sex;
          return 
            sex in ["", "male", "female"];
        }

        function breedingIdAsChild() {
          let breedingIdAsChild = request.resource.data.breedingIdAsChild;
          return 
            breedingIdAsChild is string &&
            breedingIdAsChild.size() <= 100; // documentId
        }

        function breedingIdsAsParent() {
          let breedingIdsAsParent = request.resource.data.breedingIdsAsParent;
          return 
            breedingIdsAsParent is list &&
            breedingIdsAsParent.size() <= 50;
        }

        function healthCondition() {
          let healthCondition = request.resource.data.healthCondition;
          return 
            healthCondition in ["", "healthy", "sick", "injured", "dead"];
        }

        //***** get, list, delete Animal *****//
        allow read, delete: if 
          auth() && 
          user(userDocId);

        //***** create & update Animal *****//
        allow create, update: if 
          auth() &&
          user(userDocId) &&
          animalFields() &&
          id(animalDocId) &&
          name() &&
          sex() &&
          breedingIdAsChild() &&
          breedingIdsAsParent() &&
          healthCondition() &&
          date("dateOfBirth") &&
          note() &&
          folderIds() &&
          timestamp("createdAt") &&
          timestamp("updatedAt") &&
          modifier("createdBy") &&
          modifier("updatedBy");
      }


      //==================== Breeding ====================//
      match /breedings/{breedingDocId} {
        function breedingFields() {
          let keys = request.resource.data.keys();
          let fields = [
            "id",
            "parents",
            "children",
            "status",
            "startDate",
            "endDate",
            "note",
            "folderIds",
            "createdAt",
            "createdBy",
            "updatedAt",
            "updatedBy"
          ];
          return 
            keys.hasAll(fields) &&
            keys.hasOnly(fields);
        }

        function parents() {
          let parents = request.resource.data.parents;
          return 
            parents is list &&
            parents.size() <= 2;
        }

        function children() {
          let children = request.resource.data.children;
          return 
            children is list &&
            children.size() <= 100;
        }

        function status() {
          let status = request.resource.data.status;
          return 
            status in ["", "planning", "ongoing", "done"];
        }

        //***** get, list, delete Breeding *****//
        allow read, delete: if 
          auth() &&
          user(userDocId);
        
        //***** create, update Breeding *****//
        allow create, update: if
          auth() &&
          user(userDocId) &&
          breedingFields() &&
          id(breedingDocId) &&
          parents() &&
          children() &&
          status() &&
          date("startDate") &&
          date("endDate") &&
          note() &&
          folderIds() &&
          timestamp("createdAt") &&
          timestamp("updatedAt") &&
          modifier("createdBy") &&
          modifier("updatedBy");
      }


      //==================== Folder ====================//
      // breedingsFolder
      match /breedingsFolders/{breedingsFolderDocId} {
        allow read, delete: if
          auth() &&
          user(userDocId);

        allow create, update: if
          auth() &&
          user(userDocId) &&
          folderFields() &&
          id(breedingsFolderDocId) &&
          folderName() &&
          itemIds() &&
          note() &&
          timestamp("createdAt") &&
          timestamp("updatedAt") &&
          modifier("createdBy") &&
          modifier("updatedBy");
      }

      // animalsFolder
      match /animalsFolders/{animalsFolderDocId} {
        allow read, delete: if
          auth() &&
          user(userDocId);

        allow create, update: if
          auth() &&
          user(userDocId) &&
          folderFields() &&
          id(animalsFolderDocId) &&
          folderName() &&
          itemIds() &&
          note() &&
          timestamp("createdAt") &&
          timestamp("updatedAt") &&
          modifier("createdBy") &&
          modifier("updatedBy");
      }
    }
  }
}